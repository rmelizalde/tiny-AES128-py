""" AES/MAC Test
    Author: Ricardo Martinez Elizalde
    Date: 11th January 2017
"""

from tinyAes128 import *

def test_encrypt_ecb():
  key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
  inB  = [0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a]
  outKnown = [0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97]
  testBuf = [0] * 16

  AES128_ECB_encrypt(inB, key, testBuf)

  print "ECB decrypt: "

  if cmp(outKnown, testBuf) == 0:
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"

def test_decrypt_ecb():
  key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
  inB  = [0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97]
  outKnown = [0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a]

  testBuf = [0] * 16
  AES128_ECB_decrypt(inB, key, testBuf)

  print "ECB decrypt: "

  if cmp(outKnown, testBuf) == 0:
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"

def test_encrypt_cbc():
  key = [ 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c ]
  iv  = [ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f ]
  inB  = [ 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
                    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 ]
  outKnown = [ 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
                    0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
                    0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
                    0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7 ]
  testBuf = [0] * 64

  AES128_CBC_encrypt_buffer(testBuf, inB, 64, key, iv)

  print "CBC encrypt: "

  if cmp(outKnown, testBuf) == 0:
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"



def test_decrypt_cbc():
  #Example "simulating" a smaller buffer...

  key = [ 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c ]
  iv  = [ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f ]
  inB  = [ 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
                    0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
                    0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
                    0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7 ]
  outKnown = [ 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
                    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 ]
  #Option 1: decrypt the 64 bytes long, Option 2: do it in 4 * 16 bytes buffers)
  print "CBC decrypt 64 bytes at one time: "
  testBuf = [0] * 64
  AES128_CBC_decrypt_buffer(testBuf, inB,  64, key, iv)
  if cmp(outKnown, testBuf) == 0:
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"

  print "CBC decrypt 16 bytes 4 times: "
  tmp = [0] * 16
  AES128_CBC_decrypt_buffer(tmp, inB,  16, key, iv)
  testBuf[0:16] = tmp
  AES128_CBC_decrypt_buffer(tmp, inB[16:], 16, 0, 0)
  testBuf[16:32] = tmp
  AES128_CBC_decrypt_buffer(tmp, inB[32:], 16, 0, 0)
  testBuf[32:48] = tmp
  AES128_CBC_decrypt_buffer(tmp, inB[48:], 16, 0, 0)
  testBuf[48:64] = tmp

  if cmp(outKnown, testBuf) == 0:
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"

def test_aes_cmac():
  key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
  #verification data for subkey generation
  aesK0 = [0x7d, 0xf7, 0x6b, 0x0c, 0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 0xb9, 0x1b, 0x54, 0x6f]
  K1 = [0xfb, 0xee, 0xd6, 0x18, 0x35, 0x71, 0x33, 0x66, 0x7c, 0x85, 0xe0, 0x8f, 0x72, 0x36, 0xa8, 0xde]
  K2 = [0xf7, 0xdd, 0xac, 0x30, 0x6a, 0xe2, 0x66, 0xcc, 0xf9, 0x0b, 0xc1, 0x1e, 0xe4, 0x6d, 0x51, 0x3b]
  #some messages and corresponding CMACs
  msg0 = None
  cmac0 = [0xbb, 0x1d, 0x69, 0x29, 0xe9, 0x59, 0x37, 0x28, 0x7f, 0xa3, 0x7d, 0x12, 0x9b, 0x75, 0x67, 0x46]
  msg16 = [0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a]
  cmac16 = [0x07, 0x0a, 0x16, 0xb4, 0x6b, 0x4d, 0x41, 0x44, 0xf7, 0x9b, 0xdd, 0x9d, 0xd0, 0x4a, 0x28, 0x7c]
  msg40 = [0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
                     0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                     0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11]
  cmac40 = [0xdf, 0xa6, 0x67, 0x47, 0xde, 0x9a, 0xe6, 0x30, 0x30, 0xca, 0x32, 0x61, 0x14, 0x97, 0xc8, 0x27]
  msg64 = [0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
                     0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                     0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                     0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10]
  cmac64 = [0x51, 0xf0, 0xbe, 0xbf, 0x7e, 0x3b, 0x9d, 0x92, 0xfc, 0x49, 0x74, 0x17, 0x79, 0x36, 0x3c, 0xfe]
  #buffers
  B1 = [0] * 16
  B2 = [0] * 16
  B3 = [0] * 16

  print "AES-CMAC subkeys"
  print "AES-128(key, 0)"

  AES128_CBC_encrypt_buffer(B3, B1, 16, key, B2)
  if (0 == cmp(B3, aesK0)):
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"

  AES128_CMAC_generate_subkey(B1, B2, key)
  print "Subkeys K1, K2\n"
  if ((0 == cmp(B1, K1)) and (0 == cmp(B2, K2))):
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"

  AES128_CMAC(B1, msg0, 0, key)
  print "AES-CMAC empty string:\n"
  if (0 == cmp(B1, cmac0)):
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"

  AES128_CMAC(B1, msg16, 16, key)
  print "AES-CMAC 16 bytes:\n"
  if (0 == cmp(B1, cmac16)):
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"

  AES128_CMAC(B1, msg40, 40, key)
  print "AES-CMAC 40 bytes:\n"
  if (0 == cmp(B1, cmac40)):
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"

  AES128_CMAC(B1, msg64, 64, key)
  print "AES-CMAC 64 bytes:\n"
  if (0 == cmp(B1, cmac64)):
    print "SUCCESS!\n"
  else:
    print "FAILURE!\n"


def main():
  test_decrypt_ecb()
  test_encrypt_ecb()
  test_encrypt_cbc()
  test_decrypt_cbc()
  test_aes_cmac()

if __name__ == '__main__':
    main()